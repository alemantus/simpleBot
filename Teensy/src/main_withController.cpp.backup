/*
 * rosserial PubSub Example
 * Prints "hello world!" and toggles led
 */

// ticks per rotation = ticksPerRot*2*gearRatio -> 11*2*21.3=468.6
// wheel diameter = 6cm
// wheel circumference = 2pi*r = 18.85cm

// distance per tick = 18.85/468.6 = 0.04023 cm

#include "Arduino.h"
#include "QuadEncoder.h"
#include <ros.h>
#include <std_msgs/Int32.h>
#include <geometry_msgs/Twist.h>

// Handles startup and shutdown of ROS
ros::NodeHandle nh;

// Keep track of the number of wheel ticks
std_msgs::Int32 right_wheel_tick_count;
ros::Publisher rightPub("right_ticks", &right_wheel_tick_count);

std_msgs::Int32 left_wheel_tick_count;
ros::Publisher leftPub("left_ticks", &left_wheel_tick_count);

QuadEncoder myEnc1(1, 5, 4, 0); // Encoder on channel 1 of 4 available
                                // Phase A (pin0), PhaseB(pin1), Pullups Req(0)
QuadEncoder myEnc2(2, 2, 3, 0); // Encoder on channel 2 of 4 available
                                //Phase A (pin2), PhaseB(pin3), Pullups Req(0)

long int currentMillis = 0;
long int previousMillis = 0;

int leftWheel_speed = 0;
int rightWheel_speed = 0;

// ### Code from net ###
//https://automaticaddison.com/how-to-control-a-robots-velocity-remotely-using-ros/
// Motor A connections (left)
//const int enA = 9;
//right
const int in1 = 9;
const int in2 = 8;

// Motor B connections (right)
//const int enB = 10;
//left
const int in3 = 28;
const int in4 = 29;

// How much the PWM value can change each cycle
const int PWM_INCREMENT = 1;

// Number of ticks per wheel revolution. We won't use this in this code.
const int TICKS_PER_REVOLUTION = 468;

// Wheel radius in meters
const double WHEEL_RADIUS = 0.03;

// Distance from center of the left tire to the center of the right tire in m
const double WHEEL_BASE = 0.224;

// Number of ticks a wheel makes moving a linear distance of 1 meter
// This value was measured manually.
const double TICKS_PER_METER = 2485; // Originally 2880


// Proportional constant, which was measured by measuring the
// PWM-Linear Velocity relationship for the robot.
const int K_P = 278;

// Y-intercept for the PWM-Linear Velocity relationship for the robot
const int b = 52;

// Correction multiplier for drift. Chosen through experimentation.
const int DRIFT_MULTIPLIER = 120;

// Turning PWM output (0 = min, 255 = max for PWM values)
const int PWM_TURN = 150;

// Set maximum and minimum limits for the PWM values
const int PWM_MIN = 130; // about 0.1 m/s
const int PWM_MAX = 400; // about 0.172 m/s

// Set linear velocity and PWM variable values for each wheel
double velLeftWheel = 0;
double velRightWheel = 0;
double pwmLeftReq = 0;
double pwmRightReq = 0;

// Record the time that the last velocity command was received
double lastCmdVelReceived = 0;

// !### code from web ###!

//////// Motor controller //////////

// Calculate the left wheel linear velocity in m/s every time a
// tick count message is rpublished on the /left_ticks topic.
void calc_vel_left_wheel()
{

  // Previous timestamp
  static double prevTime = 0;

  // Variable gets created and initialized the first time a function is called.
  static int prevLeftCount = 0;

  // Manage rollover and rollunder when we get outside the 32-bit integer range
  int numOfTicks = (4294967295 + left_wheel_tick_count.data - prevLeftCount) % 4294967295;

  // If we have had a big jump, it means the tick count has rolled over.
  if (numOfTicks > 10000)
  {
    numOfTicks = 0 - (4294967295 - numOfTicks);
  }

  // Calculate wheel velocity in meters per second
  velLeftWheel = numOfTicks / TICKS_PER_METER / ((millis() / 1000) - prevTime);

  // Keep track of the previous tick count
  prevLeftCount = left_wheel_tick_count.data;

  // Update the timestamp
  prevTime = (millis() / 1000);
}
void calc_vel_right_wheel()
{

  // Previous timestamp
  static double prevTime = 0;

  // Variable gets created and initialized the first time a function is called.
  static int prevRightCount = 0;

  // Manage rollover and rollunder when we get outside the 16-bit integer range
  int numOfTicks = (4294967295 + right_wheel_tick_count.data - prevRightCount) % 4294967295;

  if (numOfTicks > 10000)
  {
    numOfTicks = 0 - (4294967295 - numOfTicks);
  }

  // Calculate wheel velocity in meters per second
  velRightWheel = numOfTicks / TICKS_PER_METER / ((millis() / 1000) - prevTime);

  prevRightCount = right_wheel_tick_count.data;

  prevTime = (millis() / 1000);
}
// Take the velocity command as input and calculate the PWM values.
void calc_pwm_values(const geometry_msgs::Twist &cmdVel)
{

  // Record timestamp of last velocity command received
  lastCmdVelReceived = (millis() / 1000);

  // Calculate the PWM value given the desired velocity
  pwmLeftReq = K_P * cmdVel.linear.x + b;
  pwmRightReq = K_P * cmdVel.linear.x + b;

  // Check if we need to turn
  if (cmdVel.angular.z != 0.0)
  {

    // Turn left
    if (cmdVel.angular.z > 0.0)
    {
      pwmLeftReq = -PWM_TURN;
      pwmRightReq = PWM_TURN;
    }
    // Turn right
    else
    {
      pwmLeftReq = PWM_TURN;
      pwmRightReq = -PWM_TURN;
    }
  }
  // Go straight
  else
  {

    // Remove any differences in wheel velocities
    // to make sure the robot goes straight
    static double prevDiff = 0;
    static double prevPrevDiff = 0;
    double currDifference = velLeftWheel - velRightWheel;
    double avgDifference = (prevDiff + prevPrevDiff + currDifference) / 3;
    prevPrevDiff = prevDiff;
    prevDiff = currDifference;

    // Correct PWM values of both wheels to make the vehicle go straight
    pwmLeftReq -= (int)(avgDifference * DRIFT_MULTIPLIER);
    pwmRightReq += (int)(avgDifference * DRIFT_MULTIPLIER);
  }

  // Handle low PWM values
  if (abs(pwmLeftReq) < PWM_MIN)
  {
    pwmLeftReq = 0;
  }
  if (abs(pwmRightReq) < PWM_MIN)
  {
    pwmRightReq = 0;
  }
}

void set_pwm_values()
{

  // These variables will hold our desired PWM values
  static int pwmLeftOut = 0;
  static int pwmRightOut = 0;

  // If the required PWM is of opposite sign as the output PWM, we want to
  // stop the car before switching direction
  static bool stopped = false;
  if ((pwmLeftReq * velLeftWheel < 0 && pwmLeftOut != 0) ||
      (pwmRightReq * velRightWheel < 0 && pwmRightOut != 0))
  {
    pwmLeftReq = 0;
    pwmRightReq = 0;
  }

  // Increase the required PWM if the robot is not moving
  if (pwmLeftReq != 0 && velLeftWheel == 0)
  {
    pwmLeftReq *= 1.5;
  }
  if (pwmRightReq != 0 && velRightWheel == 0)
  {
    pwmRightReq *= 1.5;
  }

  // Calculate the output PWM value by making slow changes to the current value
  if (abs(pwmLeftReq) > pwmLeftOut)
  {
    pwmLeftOut += PWM_INCREMENT;
  }
  else if (abs(pwmLeftReq) < pwmLeftOut)
  {
    pwmLeftOut -= PWM_INCREMENT;
  }
  else
  {
  }

  if (abs(pwmRightReq) > pwmRightOut)
  {
    pwmRightOut += PWM_INCREMENT;
  }
  else if (abs(pwmRightReq) < pwmRightOut)
  {
    pwmRightOut -= PWM_INCREMENT;
  }
  else
  {
  }

  // Conditional operator to limit PWM output at the maximum
  pwmLeftOut = (pwmLeftOut > PWM_MAX) ? PWM_MAX : pwmLeftOut;
  pwmRightOut = (pwmRightOut > PWM_MAX) ? PWM_MAX : pwmRightOut;

  // PWM output cannot be less than 0
  pwmLeftOut = (pwmLeftOut < 0) ? 0 : pwmLeftOut;
  pwmRightOut = (pwmRightOut < 0) ? 0 : pwmRightOut;

  // Set the PWM value on the pins
  // Set the direction of the motors
  if (pwmLeftReq > 0)
  { // Left wheel forward
    //digitalWrite(in1, HIGH);
    char buffer[7]; //the ASCII of the integer will be stored in this char array
    itoa(pwmLeftOut, buffer, 10);
    nh.loginfo(buffer);
    analogWrite(in1, pwmLeftOut);
    analogWrite(in2, 0);
  }
  else if (pwmLeftReq < 0)
  { // Left wheel reverse
    analogWrite(in1, 0);
    analogWrite(in2, pwmLeftOut);
    //digitalWrite(in2, HIGH);
  }
  else if (pwmLeftReq == 0 && pwmLeftOut == 0)
  { // Left wheel stop
    analogWrite(in1, 0);
    analogWrite(in2, 0);
  }
  else
  { // Left wheel stop
    analogWrite(in1, 0);
    analogWrite(in2, 0);
  }

  if (pwmRightReq > 0)
  { // Right wheel forward
    //digitalWrite(in3, HIGH);
    analogWrite(in3, pwmRightOut);
    digitalWrite(in4, LOW);
  }
  else if (pwmRightReq < 0)
  { // Right wheel reverse
    digitalWrite(in3, LOW);
    analogWrite(in4, pwmRightOut);
    //digitalWrite(in4, HIGH);
  }
  else if (pwmRightReq == 0 && pwmRightOut == 0)
  { // Right wheel stop
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }
  else
  { // Right wheel stop
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }
}

// Set up ROS subscriber to the velocity command
ros::Subscriber<geometry_msgs::Twist> subCmdVel("cmd_vel", &calc_pwm_values);

float sampleTime = 0.1;

void setup()
{
  //speedInterrupt.begin(calcSpeed, 100000);
  Serial.begin(115200);
  while (!Serial && millis() < 4000)
    ;

  /* Initialize the ENC module. */
  myEnc1.setInitConfig();
  myEnc1.EncConfig.revolutionCountCondition = ENABLE;
  myEnc1.EncConfig.positionModulusValue = 0;
  myEnc1.init();

  myEnc2.setInitConfig();
  myEnc2.EncConfig.revolutionCountCondition = ENABLE;
  myEnc2.EncConfig.positionInitialValue = 0;
  myEnc2.init();

  // motor pins
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);

  // ROS Setup
  nh.getHardware()->setBaud(115200);
  nh.initNode();
  nh.advertise(rightPub);
  nh.advertise(leftPub);
  nh.subscribe(subCmdVel);
}

void loop()
{
  nh.spinOnce();
  currentMillis = millis();

  if (currentMillis - previousMillis > sampleTime * 50)
  {
    previousMillis = currentMillis;
    left_wheel_tick_count.data = myEnc2.read();
    right_wheel_tick_count.data = myEnc1.read();

    rightPub.publish(&right_wheel_tick_count);
    leftPub.publish(&left_wheel_tick_count);

    // Calculate the velocity of the right and left wheels
    calc_vel_right_wheel();
    calc_vel_left_wheel();
    char buffer[7]; //the ASCII of the integer will be stored in this char array
    buffer[0] = 'h';
    buffer[1] = 'e';
    buffer[2] = 'j';
    //itoa(pwmLeftOut, buffer, 10);
    //nh.loginfo(buffer);
  }

  // Stop the car if there are no cmd_vel messages
  if ((millis() / 1000) - lastCmdVelReceived > 1)
  {
    pwmLeftReq = 0;
    pwmRightReq = 0;
  }

  set_pwm_values();
}
